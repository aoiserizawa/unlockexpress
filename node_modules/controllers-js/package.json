{
  "name": "controllers-js",
  "description": "Simple MVC-style controllers for Express.js",
  "version": "1.0.7",
  "author": {
    "name": "Vinh Tran"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/vqtran/Controllers.js"
  },
  "contributors": [],
  "dependencies": {
    "express": "4.x.x",
    "require-dir": "0.1.0",
    "methods": "0.1.0"
  },
  "keywords": [
    "express",
    "controllers",
    "mvc",
    "routes",
    "simple"
  ],
  "main": "index",
  "engines": {
    "node": ">= 0.8.0",
    "npm": "1.3.x"
  },
  "readme": "controllers-js\n==============\nSimply adding MVC-style controllers to Express.js.\n\n*For any old users, please notice the update and please migrate to the current version.*\n\n## Install\n```\n$ npm install controllers-js\n```\nor add it to your `package.json` and \n```\n$ npm install\n```\n## Usage\nIt's really this simple:\n\nDirectory Layout:\n```\nproject\n  |- server.js\n  |- app\n     |- controllers\n         |- index.js\n         |- other_controllers.js\n```\nserver.js:\n```\nvar express = require('express');\nvar app = express();\nvar controllers = require('controllers-js')();\n\n// Some middleware\n// ...\napp.use(controllers);\n\n// more middleware...\n\nvar port = process.env.PORT || 8080;\napp.listen(port);\n```\nindex.js:\n```\nvar index = exports = module.exports = {};\n\nindex.routes = {\n    get: { action: 'get', path: '/' },\n    query: { action: 'get', path: '/:message' }\n};\n\nindex.get = function(req, res) {\n    // And are written in usual Express convention\n    res.send(\"Hello world!\");\n}\n\nindex.query = function(req,res) {\n    var message = req.params['message'];\n    res.send(message);\n}\n```\nYour Express app will now have Index's routes/handlers!\n`localhost:8080/` will say \"Hello World!\" and `localhost:8080/hi` will say \"hi\".\n\nAdd any number of routes, or controllers as you'd like, they'll all be automatically attached to your Express app.\n\n## Routing Table\nAs your application grows in complexity it may be wise to declare routes in a routing table instead to ensure the correct ordering of your handlers. We can do this as following,\n```\nvar express = require('express');\nvar app = express();\nvar Controllers = require('controllers-js');\n\nvar controllers = Controllers({table: __dirname + \"/routes.json\"});\n\napp.use(controllers);\n\nvar port = process.env.PORT || 8080;\napp.listen(port);\n```\nroutes.json\n```\n[\n   [\"GET\", \"/\", \"index\", \"get\"],\n   [\"GET\", \"/:message\", \"index\", \"query\"]\n]\n```\nA routing table here is simply a array of arrays (routes) where the first entry is the HTTP verb, the second is the path (as before), the third is the controller name, and the fourth is the handler name in the controller.\n\nYour controllers/routes now will load in the order that you define, and you no longer need to define a routes object in the individual controllers.\n\n## Documentation\n\n####`var Controllers = require(\"controllers-js\")`\nCalling this returns a function to initialize the router for the controllers.\n\n####`var controllers = Controllers(option)`\nThis function returns an Express.Router object with all the correct routes/controllers attached to be used as middleware. By default this will look for controller files in the root level of `app/controllers`. If `option.path` is specified, it will look in this directory instead. \n\nIf `option.table` is defined, it will use the routing table at that path. Details of using a routing table is explained above, and also available in the examples.\n\nOf course you can also use the short-hand,\n```\nvar controllers = require(\"controllers-js\")(options);\napp.use(controllers);\n```\n\n### Controllers\nA controller exports `routes` (unless a routing table is used) and each route handler.\n#### `export.routes`\nThe routes object is a map of handler names to routes, where each route\ncontains an http action, corresponding to Express' `app.VERB` method, and a path to serve this handler by, also corresponding to Express' convention when used with `app.VERB`.\n```\nexport.routes = {\n    handler_name1: { action: \"get|post|other http verb\", path: \"/path/toRoute\" },\n    ...\n}\n```\n#### `export.<handler_name>`\nFor each entry in the routes object, the controller _must_ also export a handler for that route.\nThis handler is the same as Express' usual convention:\n```\nexport.<handler_name> = function(req, res) {\n    ...\n}\n```\nFor nice-ness putting this at the top,\n```\nvar handler_name = exports = module.exports = {};\n```\nThis will provide a nice way of declaring exported functions/objects by appending it onto this `handler_name` object, instead of typing `export` everytime.\n\n## License\nMIT License.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vqtran/Controllers.js/issues"
  },
  "homepage": "https://github.com/vqtran/Controllers.js",
  "_id": "controllers-js@1.0.7",
  "_shasum": "30c0b1540666bda51aaa31f46d6a9e9613ee6a3a",
  "_from": "controllers-js@",
  "_resolved": "http://registry.npmjs.org/controllers-js/-/controllers-js-1.0.7.tgz"
}
